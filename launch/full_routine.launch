<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.1"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="method" default="fast"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal/Routine arguments -->
  <arg name="sensor_model_config" default="sensor_model_config.yaml"/>
  <arg name="uecv_mode" default="fast"/>
  <arg name="rviz_config_voxblox" default="example_full.rviz"/>
  
  <!-- Random Planner -->
  <arg name="verbose_planner" default="true"/>
  

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <!-- Setup a mav with odom sensor -->
  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    <!-- MPC trajectory tracker-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
    </node>
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
		</node>

		<!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>	
	</group>

  <!-- Unreal vision client -->
  <group ns="unreal">
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" output="screen">
			<param name="mode" value="$(arg uecv_mode)"/>
			<param name="publish_tf" value="true"/>
		  <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <rosparam command="load" file="$(find unreal_cv_ros)/cfg/$(arg sensor_model_config)"/>
    </node>
  </group>

		<!-- Voxblox -->
	<group ns="voxblox">
		<node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
			<remap from="pointcloud" to="/unreal/ue_sensor_out"/>
		  <param name="publish_esdf_map" value="true" />
		  <param name="publish_pointclouds" value="true" />
			<param name="tsdf_voxel_size" value="$(arg voxel_size)" />
			<param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
			<param name="color_mode" value="color" />
			<param name="use_tf_transforms" value="true" />
			<param name="update_mesh_every_n_sec" value="1.0" />
			<param name="min_time_between_msgs_sec" value="0.0" />
			<param name="method" value="$(arg method)" />
			<param name="use_const_weight" value="false" />
			<param name="allow_clear" value="true" />
			<param name="clear_sphere_for_planning" value="false" />
			<param name="verbose" value="$(arg verbose_voxblox)" />
		</node>
  </group>
  
		<!-- Random walk planner -->
		<node name="random_planner" pkg="mav_active_3d_planning" type="random_planner" output="screen" ns="$(arg mav_name)">
			<remap from="random_planner/esdf_map_in" to="/voxblox/voxblox_node/esdf_map_out" />
			<param name="use_tf_transforms" value="true" />
			<param name="tsdf_voxel_size" value="$(arg voxel_size)" />
			<param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
			<param name="update_mesh_every_n_sec" value="0.0" />
			
			<remap from="odometry" to="odometry_sensor1/odometry" />
			<param name="range" value="1.0" />
			<param name="speed" value="0.05" />
			<param name="collision_radius" value="0.4" />
			<param name="planar" value="true" />
			<param name="verbose" value="$(arg verbose_planner)" />
		</node>
		
		<!-- Simulation manager for launching and monitoring-->
		<node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen" ns="unreal">
		<param name="ns_mav" value="/$(arg mav_name)" />
		<param name="monitor" value="true" />
		<remap from="ue_raw_in" to="ue_sensor_raw" />
		<remap from="ue_out_in" to="ue_sensor_out" />
	</node>
		
		<!-- Visualization -->
		<node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find unreal_cv_ros)/cfg/$(arg rviz_config_voxblox)"/>
</launch>
