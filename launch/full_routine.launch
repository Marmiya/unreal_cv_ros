<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="empty"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>

  <arg name="verbose_gazebo" default="false"/>
  <arg name="verbose_voxblox" default="false"/>
  <!-- Unreal/Routine arguments -->
  <arg name="sensor_model_config" default="sensor_model_config.yaml"/>
  <arg name="uecv_mode" default="standard"/>
  <arg name="rviz_config_voxblox" default="test_launch_config_voxblox.rviz"/>


  <!-- Setup gazebo world -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <!-- Setup a mav -->
  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <!-- position controller from the tutorial (with config and mav_config) -->
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <!-- State publishers 
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
		-->

    <!-- Unreal vision client + sensor model -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
			<param name="mode" value="$(arg uecv_mode)"/>
    </node>
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <rosparam command="load" file="$(find unreal_cv_ros)/cfg/$(arg sensor_model_config)"/>
      <param name="mode" value="$(arg uecv_mode)"/>
    </node>
    <!-- static camera transform (odom to camera frame)-->
   <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>
  </group>

	<!-- Voxblox (with visualization)-->
	<node name="voxblox_node" pkg="voxblox_ros" type="tsdf_server" output="screen" args="-alsologtostderr" clear_params="true">
		<remap from="pointcloud" to="/$(arg mav_name)/ue_sensor_out"/>
		<param name="tsdf_voxel_size" value="0.1" />
		<param name="tsdf_voxels_per_side" value="16" />
		<param name="voxel_carving_enabled" value="true" />
		<param name="color_mode" value="color" />
		<param name="use_tf_transforms" value="true" />
		<param name="update_mesh_every_n_sec" value="1.0" />
		<param name="min_time_between_msgs_sec" value="0.0" />
		<param name="method" value="fast" />
		<param name="use_const_weight" value="false" />
		<param name="allow_clear" value="true" />
		<param name="verbose" value="$(arg verbose_voxblox)" />
	</node>
	<node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find unreal_cv_ros)/cfg/$(arg rviz_config_voxblox)"/>

	<!-- Some simple movement for testing -->
  <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen" ns="$(arg mav_name)">
		<param name="x" value="0" />
		<param name="y" value="0" />
		<param name="z" value="1.0" />
		<param name="yaw" value="1.57" />
  </node>
</launch>
